#!/usr/bin/env bash

# Declares a few colors with tput
# Foreground
fgBlack8="$(tput setaf 0)";
export fgBlack8
fgRed8="$(tput setaf 1)";
export fgRed8
fgGreen8="$(tput setaf 2)";
export fgGreen8
fgYellow8="$(tput setaf 3)";
export fgYellow8
fgBlue8="$(tput setaf 4)";
export fgBlue8
fgMagenta8="$(tput setaf 5)";
export fgMagenta8
fgCyan8="$(tput setaf 6)";
export fgCyan8
fgWhite8="$(tput setaf 7)";
export fgWhite8

# Background
bgBlack8="$(tput setab 0)";
export bgBlack8
bgRed8="$(tput setab 1)";
export bgRed8
bgGreen8="$(tput setab 2)";
export bgGreen8
bgYellow8="$(tput setab 3)";
export bgYellow8
bgBlue8="$(tput setab 4)";
export bgBlue8
bgMagenta8="$(tput setab 5)";
export bgMagenta8
bgCyan8="$(tput setab 6)";
export bgCyan8
bgWhite8="$(tput setab 7)";
export bgWhite8

# Other colors
# Foreground
fgLightGray="\e[37m"
export fgLightGray
fgDarkGray="\e[90m"
export fgDarkGray
fgLightRed="\e[91"
export fgLightRed
fgLightGreen="\e[92m"
export fgLightGreen
fgLightYellow="\e[93m"
export fgLightYellow
fgLightBlue="\e[94m"
export fgLightBlue
fgLightMagenta="\e[95m"
export fgLightMagenta
fgLightCyan="\e[96m"
export fgLightCyan

# Background
bgLightGray="\e[47m"
export bgLightGray
bgDarkGray="\e[100m"
export bgDarkGray
bgLightRed="\e[101"
export bgLightRed
bgLightGreen="\e[102m"
export bgLightGreen
bgLightYellow="\e[102m"
export bgLightYellow
bgLightBlue="\e[104m"
export bgLightBlue
bgLightMagenta="\e[105m"
export bgLightMagenta
bgLightCyan="\e[106m"
export bgLightCyan

txBold=$(tput bold)   # bold
export txBold
txHalf=$(tput dim)    # half-bright
export txHalf
txUnderline=$(tput smul)   # underline
export txUnderline
txEndUnder=$(tput rmul)   # exit underline
export txEndUnder
txReverse=$(tput rev)    # reverse
export txReverse
txStandout=$(tput smso)   # standout
export txStandout
txEndStand=$(tput rmso)   # exit standout
export txEndStand
txReset=$(tput sgr0)   # reset attributes
export txReset

# Declares variables required/optional for amakesys to work
prefix="/usr/local"
CC="gcc"
CXX="g++"
cc_flags="-I include/ -I /usr/local/include -MP -MMD"
cpp_flags="-I include/ -I /usr/local/include -MP -MMD"
ld_flags="-I include/ -I /usr/local/include -MP -MMD"
curcomp=""
prefix="/usr/local"
arrnum=0
bindir="bin"
link="cpp"
cppcomp="false"
ccomp="false"
iteration=0
debug=":"
pctr=0
sources=()
unset sources
print=()
unset print
asmakefile="ASMakefile"
runtarget=""
target=""
project=""
currdir="$PWD"
failed="false"
alr_built=''
built="false"
opts=()
unset opts
srcdir="."
currentdirname="${PWD##*/}"
depctr=0
update=false
cpr=
str=

# Shows the usage of amakesys
# When called
usage() 
{
	echo "Usage: amakesys [options] [target] ..."
	echo "Options:"
	echo "	--prefix [PREFIX]	Sets the directory to install always on bin directory:"
	echo "prefixdir/bin"
	echo "	install 		Copies a run script to prefixdir/bin"
	echo "	clean			Cleans built and/or installed software"
	echo "	--debug			Shows the line being read on the ASMakefile"
	echo "(does not work properly)"
	echo "	-r 			Creates a run script"
	echo "	-i [FILE]		Uses FILE as a ASMakefile"
	echo "	update			Overwrites the objects files and binaries"
	echo "	-h --help		Prints this and exits"
	echo
	echo "amakesys A really simple build system"
	echo "Reads ASMakefiles and builds cpp/c sources with g++ and gcc"
	echo "Extensions supported: .c .cpp .C .cxx .c++ .cc"
	echo "Not tested with precompiled headers"
	exit 0
}

# Options handling

for arg in "$@"; do
  shift
  case "$arg" in
    "--help") set -- "$@" "-h" ;;
    "--prefix") set -- "$@" "-p" ;;
    "install")   set -- "$@" "-o" ;;
    "clean") set -- "$@" "-c";;
    "--debug") set -- "$@" "-d";;
    "update") set -- "$@" "-u";;
    *)        set -- "$@" "$arg"
  esac
done

OPTIND=1
while getopts "p:ocdri:hul" o; do
case $o in
		p) prefix="$OPTARG" 
		   opts+=("--prefix $OPTARG") ;;
		o) instopt="true"
		   opts+=("install") ;;
		c) clsopt=true
		   opts+=("clean") ;;
		d) debug="echo \"Executing line: $iteration\""
		   opts+=("--debug");;
		r) runopt=true
		   opts+=("-r") ;;
		i) asmakefile="$OPTARG"
		   opts+=("-i $OPTARG") ;;
		u) update="true" 
		   opts+=("-u");;
		h) usage ;;
		*)
		echo "Option not found"
		usage
		;;
	esac
done
shift "$(expr $OPTIND - 1)"
# gets a string inside first matching brackets
get_brc() 
{
	line=${line#*(}
	line=${line%)*}
	echo $line
}
fail() 
{
	echo "$*"
	echo "Exit with code: 1"
	sudo rm -rf $asmakefile.tmp 
	sudo rm -rf $asmakefile.tmp.tmp
	exit 1 
}
# Gets the values for the ifeq statement
ifeq()
{
	cpr="$1"
	str="$2"
	str=$( echo $str | tr -d '\r\n' )
}
# Gets the values for the ifnoteq statement and so on
ifnoteq()
{
	cpr="$1"
	str="$2"
	str=$( echo $str | tr -d '\r\n' )
}

if [[ $config != "false" ]]; then

echo "AMakesys build system"
echo "Made by: Alphadinosaur89"

if [[ -f $asmakefile ]]; then
	echo "ASMakefile found"
	echo "Making some checks. . ."
else
	echo "ASMakefile not found"
	echo "Exiting. . ."
	exit 1
fi

# Check if compilers work
# g++ and gcc

printf "Checking if c++ (g++) compiler works. . . "
echo '#include <iostream>
int main() {
    std::cout << "Hello World!";
    return 0;
}' > aconftest.cpp

g++ aconftest.cpp -o aconftest
sudo rm -rf aconftest.cpp
if [[ -f aconftest ]]; then
	printf "ok\n"
	sudo rm -rf aconftest
else
	printf "failed"
	exit 1
fi

printf "Checking if c (gcc) compiler works. . . "
echo '#include <stdio.h>
int main() {
   printf("Hello, World!");
   return 0;
}' > aconftest.c

gcc aconftest.c -o aconftest
sudo rm -rf aconftest.c
if [[ -f aconftest ]]; then
	printf "ok\n"
	echo "Building. . ."
	sudo rm -rf aconftest
else
	printf "failed"
	exit 1
fi

else # if [[ $config != "false" ]]; then
	if [[ -f $asmakefile ]]; then # Checks for the next target
		echo "${fgMagenta8}${txBold}Next target found${txReset}"
		echo "${fgBlue8}${txBold}Building. . .${txReset}"
	fi	
fi

# Remove all blank spaces from the ASMakefile,
# Removes all comments
# Removes all spaces and tabs from the start of each line
# and creates a $asmakefile.tmp
awk '{sub(/#.*$/,"")}1' $asmakefile > $asmakefile.tmp.tmp
sed -r '/^\s*$/d' $asmakefile.tmp.tmp > $asmakefile.tmp.t
awk '{$1=$1}1' $asmakefile.tmp.t > $asmakefile.tmp
# Reads from $asmakefile.tmp
# Parses the statements in it
while IFS= read -r line; do
	iteration=$((iteration+1))
	case $line in
		ifeq*)
			eval "$line"
			
			if [[ $prs_if != false ]]; then
				if [[ "${!cpr}" == "$str" ]]; then
					while IFS= read -r lin; do
   						if [[ $lin != "end\; $cpr $str*" ]]; then
   							:
    						else
    							break
    						fi
					done < <(tail -n "+$((iteration+1))" $asmakefile.tmp)
				else
					prs_if=false
					sed -i "$iteration d" "$asmakefile.tmp"
					while IFS= read -r lin; do
						if [[ $lin != "end\;* $cpr $str*" ]]; then
							sed -i "$iteration d" "$asmakefile.tmp"
						else
							sed -i "$iteration d" "$asmakefile.tmp"
							break
						fi
					done < <(tail -n "+$iteration" $asmakefile.tmp)
				fi
			else
				prs_if=
			fi
		;;
		ifnoteq*)
			eval "$line"
			
			if [[ $prs_if != false ]]; then
				if [[ "${!cpr}" != "$str" ]]; then
					while IFS= read -r lin; do
   						if [[ $lin != "end\;* $cpr $str*" ]]; then
   							:
    						else
    							break
    						fi
					done < <(tail -n "+$((iteration+1))" $asmakefile.tmp)
				else
					prs_if=false
					sed -i "$iteration d" "$asmakefile.tmp"
					while IFS= read -r lin; do
						if [[ $lin != "end\;* $cpr $str*" ]]; then
							sed -i "$iteration d" "$asmakefile.tmp"
						else
							sed -i "$iteration d" "$asmakefile.tmp"
							break
						fi
					done < <(tail -n "+$iteration" $asmakefile.tmp)
				fi
			else
				prs_if=
			fi
		;;
		
		*)
		:
		;;
	esac
done < $asmakefile.tmp

line=
iteration=0
# Read ASMakefile
# This acctually reads from the ASMakefile.tmp
while IFS= read -r line; do
	iteration=$((iteration+1))
	case $line in
		project=*|project*)
			project=$( get_brc )
			eval $debug
		;;
		cc_flags=*|cc_flags*)
			cc_flags=$( get_brc )
			eval $debug
		;;
		cpp_flags=*|cpp_flags*)
			cpp_flags=$( get_brc )
			eval $debug
		;;
		linker_flags=*|linker_flags*)
			ld_flags=$( get_brc )
			eval $debug
		;;
		source_dir=*|source_dir*)
			srcdir=$( get_brc )
			[ -d $srcdir ] || fail "Source directory $srcdir not found"
			eval $debug
		;;
		bin_dir=*|bin_dir*|bindir*)
			bindir=$( get_brc )
			eval $debug
		;;
		install=*|install*)
			install=$( get_brc )
			eval $debug
		;;
		comp_cc=*|comp_cc*)
			ccomp=$( get_brc )
			eval $debug
		;;
		comp_cpp=*|comp_cpp*)
			echo
			cppcomp=$( get_brc )
			eval $debug
		;;
		add_source=*|add_source*)
			sources[$arrnum]=$( get_brc )
			[ -f $srcdir/${sources[$arrnum]} ] || fail "Couldnt find ${sources[$arrnum]} source file"
			arrnum=$((arrnum+1))
			eval $debug
		;;
		link_with=*|link_with*)
			link=$( get_brc )
			eval $debug
		;;
		print*)
			print[$pctr]=$( get_brc )
			pctr=$((pctr+1))
			eval $debug
		;;
		target*)
			config="false"
			export config
			target=$( get_brc )
			[ -f "$target" ] || fail "Couldnt find $target"
			runtarget="amakesys ${opts[*]} -i $target"
			export "${opts[@]}"
			eval $debug
		;;
		exec_command*|exec_comand=*)
			exccmd=$( get_brc )
			eval "$exccmd"
			eval "$debug"
		;;
		add_dep*)
			deps[$depctr]="$( get_brc )"
			((depctr++))
			eval $debug
		;;
		shared*)
			cpp_flags+=" -fPIC"
			cc_flags+=" -fPIC"
			ld_flags+=" -shared"
		;;
		ifeq*)
		:
		;;
		ifnoteq*)
		:
		;;
		\#*)
			:
		;;
		\end\;*)
			:
		;;
		\;*)
			:
		;;
		*)
		echo "Syntax error or unsupported ASMakefile format"
		echo "Exit with code: 1"
		#rm -rf $asmakefile.tmp
		rm -rf $asmakefile.tmp.tmp
		rm -rf $asmakefile.tmp.t
		exit 1
		;;
	esac
done < "$asmakefile.tmp"
# Removes temporary files
#rm -rf $asmakefile.tmp
rm -rf $asmakefile.tmp.tmp
rm -rf $asmakefile.tmp.t

if [[ $project == "" ]]; then
	echo "${fgCyan8}${txBold}Project name not set${txReset}"
	echo "${fgCyan8}${txBold}Using the current directory as it${txReset}"
	project="$currentdirname"
fi

ctr=0
i=0

# Creates a run script whith the project name
create_run() {
echo "\
#!/bin/bash

$currdir/build/$bindir/$project
exitcode=\"\$?\"

fail() {
	echo \"Program returned an error\"
	echo \"Exit code \$exitcode\"
}

[ \"\$exitcode\" -eq \"0\" ] || fail" > $project
chmod 755 $project
}

# prints the current target
echo "${fgYellow8}${txBold}Current target: $project${txReset}"

# If amakesys encounters a executable the same name of the project then
# it prints that its already built
# And it declares a already_built (alr_built) variable
if [[ $update != true ]]; then
	if [ -f build/$bindir/$project ]; then
		echo "${fgBlue8}${txBold}Target $project already built${txReset}"
		alr_built="true"
	else
		alr_built="false"
	fi
fi

# Declare some functions used when compiling
get_obj() {
	case ${sources[$ctr]} in
		*.cpp|*.cxx|*.c++)
		local sources[$ctr]=${sources[$ctr]::-4}
		;;
		
		*.C)
		local sources[$ctr]=${sources[$ctr]::-2}
		;;
		
		*.cc)
		local sources[$ctr]=${sources[$ctr]::-3}
		;;
		
		*.c)
		local sources[$ctr]=${sources[$ctr]::-2}
		;;
	esac
	echo "${sources[$ctr]}"
}
rm_o() {
	local sources[$i]="${sources[$i]}.o"
	case ${sources[$i]} in
		*.cpp.o|*.c.o)
		local sources[$i]=${sources[$i]::-2}
		;;
	esac
}
get_tobj() {
	case ${sources[$i]} in
		*.cpp|*.C|*.cc|*.cxx|*.c++)
		local sources[$i]="${sources[$i]}.o "
		;;
		
		*.c)
		local sources[$i]="${sources[$i]}.o "
		;;
	esac
	echo "${sources[$i]}"
}
ok() {
	printf "${txBold}${fgGreen8}OK${txReset}\n"
}
failed() {
	failed="true"
	printf "${txBold}${fgRed8}FAILED${txReset}\n"
}
create_dirs() {
	mkdir build 2>/dev/null
	mkdir build/$bindir 2>/dev/null
	mkdir build/objs 2>/dev/null
}
create_dirs

# Declares the flags used by the compiler
allcxxflags="-c $srcdir/$cxxsrc -o build/objs/$cxxsrc.o $cpp_flags"
allccflags="-c $srcdir/$ccsrc -o build/objs/$ccsrc.o $cc_flags"

# Prints everything from the print array 
# Which is declared when reading the ASMakefile
for ((i=0;i<${#print[*]};i++)) do
	printf "${print[$i]}"
done

		########################
		#    BUILD AND LINK    #
		########################
	
counter=0	
i=0
if [ "$clsopt" != "true" ] && [ "$instopt" != "true" ] && [ "$alr_built" != "true" ]; then
	while (( $i < ${#sources[*]} )); do
		building="true"
		curcomp=$( get_obj )
		
		num_srcs=${#sources[*]}
		step=$((100/$num_srcs))
		((counter+=step))
		
		# If objects are already found amakesys skips them
		if [[ $update != "true" ]]; then
			if [ -f "build/objs/${sources[$i]}.o" ]; then
				cmp="false"
			else
				cmp="true"
			fi
		else
			cmp="true"
		fi

		# Declares the current c source or c++ source
		case "${sources[$ctr]}" in 
			*.cpp|*.C|*.cc|*.cxx|*.c++)
			cxxsrc="${sources[$ctr]}"
			;;
			
			*.c)
			ccsrc="${sources[$ctr]}"
			;;
		esac
		allcxxflags="-c $srcdir/$cxxsrc -o build/objs/$cxxsrc.o $cpp_flags -I include/ -I /usr/local/include -MP -MMD"
		allccflags="-c $srcdir/$ccsrc -o build/objs/$ccsrc.o $cc_flags -I include/ -I /usr/local/include -MP -MMD"
		
		# If a object is not found then it starts compiling
		if [[ $cmp == "true" ]]; then
		if [ "$cppcomp" == "true" ] || [ "$ccomp" == "true" ]; then
			:
		else
			echo "Compiling is not enabled"
		fi	
		
		if [[ "$ccomp" == "true" ]] && [[ ${sources[$ctr]} == "$curcomp.c" ]]; then
			 echo -e "${fgLightGray}[ %$counter ] ${txBold}${fgBlue8}\$(CC)${txReset} ${txBold}${fgYellow8}Compiling with:${txReset} ${txBold}${fgGreen8}$allccflags${txReset}"
			 echo
			if eval "$CC $allccflags"; then
				ok
			else
				failed
			fi
		fi
		if [ "$cppcomp" == "true" ] && [ "${sources[$ctr]}" == "$curcomp.cpp" ] || [ "${sources[$ctr]}" == "$curcomp.C" ] || [ "${sources[$ctr]}" == "$curcomp.cc" ] ||[ "${sources[$ctr]}" == "$curcomp.cxx" ] || [ "${sources[$ctr]}" == "$curcomp.c++" ]; then
			 echo -e "${fgLightGray}[ %$counter ] ${txBold}${fgBlue8}\$(CXX)${txReset} ${txBold}${fgYellow8}Compiling with:${txReset} ${txBold}${fgGreen8}$allcxxflags${txReset}"
			 echo
			if eval "$CXX $allcxxflags"; then
				ok
			else
				failed
			fi
		fi
		fi
		ctr=$((ctr+1))
		i=$((i+1))
	done

		# LINK

	# Check for dependencies
	for ((i=0;i<${#sources[*]};i++)) do
		if [ -f "build/objs/${sources[$i]}.o" ]; then
			:
		else
			echo "${fgRed8}${txBold}Dependency: ${sources[$i]}.o not found${txReset}"
		fi
	done

	# Check for dependencies added with add_dep
	# And adds it to link
	for ((i=0;i<${#deps[*]};i++)); do
			if [ -f "${deps[$i]}" ]; then
				depsrcs+="${deps[$i]} "
			else
				echo "${fgRed8}${txBold}Dependency: ${deps[$i]} not found${txReset}"
			fi
	done
	
	allldflags="${srcs[*]} $ld_flags -o build/$bindir/$project"
	srcs=()
	i="0"
	# Declares what to link
	while (( $i < ${#sources[*]} )); do
		ssrc="build/objs/$( get_tobj )"
		srcs+=("$ssrc")
		i=$((i+1))
	done
	
	# Declares the flags used for linking
	allldflags="${depsrcs[*]}${srcs[*]}$ld_flags -o build/$bindir/$project"
	echo "${txBold}${fgBlue8}\$(LD)${txReset} ${txBold}${fgYellow8}Linking with:${txReset} ${txBold}${fgGreen8}$allldflags${txReset}"
	echo

	if [[ $link == "cpp" ]]; then
		if eval "$CXX $allldflags"; then
			ok
		else
			failed
		fi
	elif [[ $link == "c" ]]; then
		if eval $CC "$allldflags"; then
			ok
		else
			failed
		fi			
	fi	
fi

# Checks if it was successfully built
if [ -f build/bin/$project ] && [ "$alr_built" != "true" ]; then
	built="true"
fi

		#################
		#    INSTALL    #
		#################
		
# If amakesys install is ran then it executes this bit
if [[ $instopt == "true" ]]; then
	
	# Saves the prefix in .amakecfg folder
	# for cleaning
	echo "prefix=\"$prefix\"" > .amakecfg	
	if [[ $install == "true" ]]; then
	
		echo
		echo "${txBold}${fgYellow8}Please create your own install script${txReset}"
		echo "${txBold}${fgYellow8}This may not work${txReset}"
		echo "${txBold}${fgBlue8}Install $project${txReset}"
		
		# Creates a run script with the name of the project
		create_run
		echo "cp $project to $prefix/bin/"
		# And copies it to PREFIXDIR/bin
		# The directory must exist
		if sudo cp ./$project $prefix/bin/; then
			echo "${txBold}${fgGreen8}Installation Sucessful${txReset}"
		else
			echo "${txBold}${fgRed8}Installation Failed${txReset}"
		fi
		# Removes the run script
		sudo rm -rf $project
		
	else # If install is not enabled in the ASMakefile then it prints this:
		echo "Install is not enabled"
	fi
	
fi

		###############
		#    CLEAN    #
		###############
		
i=0
# If amakesys clean is ran then it executes this bit
if [[ $clsopt == "true" ]]; then

	# Gets the prefixdir
	if [ -f .amakecfg ]; then
		source .amakecfg
	fi
	echo "${txBold}${fgBlue8}Removing $project${txReset}"
	
	if [ -f build/$bindir/$project ]; then
	if rm -rf build/$bindir/$project; then
		printf "${txBold}${fgGreen8}OK $project${txReset}\n"
	else
		failed
		printf " $project\n"
	fi		
	fi
	
	# Detects which files to remove and remove them in a loop
	while (( $i < ${#sources[*]} )); do
		curr="${sources[$i]}"
		
		echo "${txBold}${fgBlue8}Removing $curr.o${txReset}"
		if sudo rm -rf "build/objs/${sources[$i]}.o"; then
			if sudo rm -rf build/objs/${sources[$i]}.d; then
				printf "${txBold}${fgGreen8}OK${txReset}"
				printf " ${txBold}${fgGreen8}$curr${txReset}\n"
			else
				printf "${txBold}${fgRed8}FAILEDK${txReset}"
				printf " ${txBold}${fgRed8}$curr${txReset}\n"
			fi
		else
			printf "${txBold}${fgRed8}FAILEDK${txReset}"
			printf " ${txBold}${fgRed8}$curr${txReset}\n"
		fi
		i=$((i+1))
	done
	
	# If a run script is found remove it
	if [ -f "$project.sh" ]; then
		echo "${txBold}${fgBlue8}Removing run script${txReset}"
		if sudo rm -rf "$project.sh"; then
			ok
		else
			failed
		fi
	fi
	if find "build/$bindir" -mindepth 1 -print -quit 2>/dev/null | grep -q .; then
    		:
	else
		echo "${txBold}${fgBlue8}Removing build/$bindir${txReset}"
		if rmdir build/$bindir; then
			ok
		else
			failed
		fi
	fi
	if find "build/objs" -mindepth 1 -print -quit 2>/dev/null | grep -q .; then
    		:
    	else
		echo "${txBold}${fgBlue8}Removing build/objs${txReset}"
		if rmdir build/objs; then
			ok
		else
			failed
		fi
	fi
	if find "build" -mindepth 1 -print -quit 2>/dev/null | grep -q .; then
    		:
    	else
		echo "${txBold}${fgBlue8}Removing build${txReset}"
		if rmdir build; then
			ok
		else
			failed
		fi
	fi
	if find "$prefix/$bindir/$project" -mindepth 1 -print -quit 2>/dev/null | grep -q .; then
    		:
    	else
		echo "${txBold}${fgBlue8}Removing $prefix/$bindir/$project${txReset}"
		if sudo rm -rf "$prefix/$bindir/$project"; then
			ok
		else
			failed
		fi
	fi

fi

		#################################
		#     CREATE A run SCRIPT   	#
		#################################

# If amakesys -r is ran then it executes this bit
if [[ $runopt == "true" ]]; then
	echo "\
#!/bin/bash

./build/$bindir/$project
exitcode=\"\$?\"

fail() {
	echo \"Program returned an error\"
	echo \"Exit code \$exitcode\"
}

[ \"\$exitcode\" -eq \"0\" ] || fail" > $project.sh
# Creates a run script and then mark it as a executable
chmod 755 $project.sh
fi

# Checks if the target was successfully built then it prints the state
if [ "$failed" == "false" ] && [ "$built" == "true" ]; then
	echo "${fgMagenta8}${txBold}Target successfully built${txReset}"
	echo
elif [[ $alr_built == "true" ]]; then
	:
else
	if [[ $building == "true" ]]; then
		echo "${fgRed8}${txBold}Target failed building${txReset}"
		echo 
	fi
fi

# Export the asmakefile name for the next target
asmakefile="$target"
export asmakefile

# Runs amakesys -i TARGETNAME
# And the options used to run amakesys
eval $runtarget

# Exits with a state of 0
exit 0










